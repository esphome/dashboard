{
  "esp32_touch": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "esp32_touch::ESP32TouchComponent",
                "parents": [
                  "Component"
                ]
              },
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID for code generation.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "setup_mode": {
              "key": "Optional",
              "default": "False",
              "type": "boolean",
              "docs": "**boolean**: Whether debug messages with the touch pad value should be displayed in the logs. Useful for finding out suitable thresholds for the binary sensors, but spam the logs. See [setting up touch pads](https://esphome.io/components/binary_sensor/esp32_touch.html#esp32-touch-binary-sensor) for more information. Defaults to false.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "iir_filter": {
              "key": "Optional",
              "default": "0ms",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.positive_time_period_milliseconds"
                ]
              },
              "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Optionally set up an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter should be applied to all touch pads. This can increase the accuracy of the touch pads a lot, but higher values decrease the response time. A good value to start with is `10ms`. Default is no IIR filter.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "sleep_duration": {
              "key": "Optional",
              "default": "27306us",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.time_period_dict"
                ]
              },
              "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set a time period denoting the amount of time the touch peripheral should sleep between measurements. This can decrease power usage but make the sensor slower. Default is about 27 milliseconds.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "measurement_duration": {
              "key": "Optional",
              "default": "8192us",
              "type": "schema",
              "schema": {
                "extends": [
                  "core.time_period_dict"
                ]
              },
              "docs": "**[Time](https://esphome.io/guides/configuration-types.html#config-time)**: Set the conversion time for all touch pads. A longer conversion time means that more charge/discharge cycles of the touch pad can be performed, therefore increasing accuracy. Default is about 8ms, the maximum amount.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "low_voltage_reference": {
              "key": "Optional",
              "default": "0.5V",
              "docs": "The low voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `0.5V`, `0.6V`, `0.7V`, `0.8V`. Default is `0.5V`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "high_voltage_reference": {
              "key": "Optional",
              "default": "2.7V",
              "docs": "The high voltage reference to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `2.4V`, `2.5V`, `2.6V`, `2.7V`. Default is `2.7V`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            },
            "voltage_attenuation": {
              "key": "Optional",
              "default": "0V",
              "docs": "The voltage attenuation to use for the charge cycles. See the [esp-idf docs](https://docs.espressif.com/projects/esp-idf/en/latest/api-reference/peripherals/touch_pad.html#optimization-of-measurements) for a nice explanation of this. One of `1.5V`, `1V`, `0.5V`, `0V`. Default is `0V`.\n\n*See also: [esp32_touch Component/Hub](https://esphome.io/components/binary_sensor/esp32_touch.html#configuration-variables)*"
            }
          },
          "extends": [
            "core.COMPONENT_SCHEMA"
          ]
        }
      }
    }
  },
  "esp32_touch.binary_sensor": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "binary_sensor.BINARY_SENSOR_SCHEMA"
          ],
          "config_vars": {
            "id": {
              "id_type": {
                "class": "esp32_touch::ESP32TouchBinarySensor",
                "parents": [
                  "binary_sensor::BinarySensor",
                  "EntityBase"
                ]
              },
              "docs": "**[ID](https://esphome.io/guides/configuration-types.html#config-id)**: Manually specify the ID used for code generation.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
            },
            "esp32_touch_id": {
              "key": "GeneratedID",
              "use_id_type": "esp32_touch::ESP32TouchComponent",
              "type": "use_id"
            },
            "pin": {
              "key": "Required",
              "docs": "**[Pin](https://esphome.io/guides/configuration-types.html#config-pin)**: The pin to detect touch events on.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
            },
            "threshold": {
              "key": "Required",
              "type": "integer",
              "data_type": "uint16_t",
              "docs": "**int**: The threshold to use to detect touch events. Smaller values mean a higher probability that the pad is being touched.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
            },
            "wakeup_threshold": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "data_type": "uint16_t",
              "docs": "**int**: The threshold to use to detect touch events to wakeup from deep sleep. Smaller values mean a higher probability that the pad is being touched. All touch pad sensors that should trigger a wakeup from deep sleep must specify this value. The [Deep Sleep Component](https://esphome.io/components/deep_sleep.html#deep-sleep-component) must also be configured to enable a wakeup from a touch event. Note that no filter is active during deep sleep.\n\n*See also: [esp32_touch Binary Sensor](https://esphome.io/components/binary_sensor/esp32_touch.html#id1)*"
            }
          }
        }
      }
    }
  }
}