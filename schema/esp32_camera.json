{
  "esp32_camera": {
    "schemas": {
      "CONFIG_SCHEMA": {
        "type": "schema",
        "schema": {
          "extends": [
            "core.ENTITY_BASE_SCHEMA",
            "core.COMPONENT_SCHEMA"
          ],
          "config_vars": {
            "id": {
              "key": "GeneratedID",
              "id_type": {
                "class": "esp32_camera::ESP32Camera",
                "parents": [
                  "PollingComponent",
                  "Component",
                  "EntityBase"
                ]
              }
            },
            "data_pins": {
              "key": "Required",
              "docs": "**list of pins**: The data lanes of the camera, this must be a list of 8 GPIO pins.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "vsync_pin": {
              "key": "Required",
              "internal": true,
              "modes": [
                "input"
              ],
              "type": "pin",
              "docs": "**pin**: The pin the VSYNC line of the camera is connected to.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "href_pin": {
              "key": "Required",
              "internal": true,
              "modes": [
                "input"
              ],
              "type": "pin",
              "docs": "**pin**: The pin the HREF line of the camera is connected to.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "pixel_clock_pin": {
              "key": "Required",
              "internal": true,
              "modes": [
                "input"
              ],
              "type": "pin",
              "docs": "**pin**: The pin the pixel clock line of the camera is connected to.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "external_clock": {
              "key": "Required",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "pin": {
                    "key": "Required",
                    "internal": true,
                    "modes": [
                      "input"
                    ],
                    "type": "pin",
                    "docs": "**pin**: The pin the external clock line is connected to.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
                  },
                  "frequency": {
                    "key": "Optional",
                    "default": "20MHz",
                    "type": "enum",
                    "values": [
                      20000000.0,
                      10000000.0
                    ],
                    "docs": "**float**: The frequency of the external clock, must be either 20MHz or 10MHz. Defaults to `20MHz`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
                  }
                }
              },
              "docs": "The configuration of the external clock to drive the camera.\n  * **pin** (**Required**, pin): The pin the external clock line is connected to.\n  \n  * **frequency** (*Optional*, float): The frequency of the external clock, must be either 20MHz or 10MHz. Defaults to `20MHz`.\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "i2c_pins": {
              "key": "Required",
              "type": "schema",
              "schema": {
                "config_vars": {
                  "sda": {
                    "key": "Required",
                    "internal": true,
                    "modes": [
                      "output"
                    ],
                    "type": "pin",
                    "docs": "**pin**: The SDA pin of the I\u00b2C interface. Also called `SIOD`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
                  },
                  "scl": {
                    "key": "Required",
                    "internal": true,
                    "modes": [
                      "output"
                    ],
                    "type": "pin",
                    "docs": "**pin**: The SCL pin of the I\u00b2C interface. Also called `SIOC`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
                  }
                }
              },
              "docs": "The I\u00b2C control pins of the camera.\n  * **sda** (**Required**, pin): The SDA pin of the I\u00b2C interface. Also called `SIOD`.\n  \n  * **scl** (**Required**, pin): The SCL pin of the I\u00b2C interface. Also called `SIOC`.\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "reset_pin": {
              "key": "Optional",
              "internal": true,
              "modes": [
                "output"
              ],
              "type": "pin",
              "docs": "**pin**: The ESP pin the reset pin of the camera is connected to. If set, this will reset the camera before the ESP boots.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "power_down_pin": {
              "key": "Optional",
              "internal": true,
              "modes": [
                "output"
              ],
              "type": "pin",
              "docs": "**pin**: The ESP pin to power down the camera. If set, this will power down the camera while it is inactive.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "resolution": {
              "key": "Optional",
              "default": "640X480",
              "type": "enum",
              "values": [
                "160X120",
                "QQVGA",
                "176X144",
                "QCIF",
                "240X176",
                "HQVGA",
                "320X240",
                "QVGA",
                "400X296",
                "CIF",
                "640X480",
                "VGA",
                "800X600",
                "SVGA",
                "1024X768",
                "XGA",
                "1280X1024",
                "SXGA",
                "1600X1200",
                "UXGA"
              ],
              "docs": "**enum**: The resolution the camera will capture images at. Higher resolutions require more memory, if there\u2019s not enough memory you will see an error during startup.\n  * `160x120` (QQVGA)\n  \n  * `176x144` (QCIF)\n  \n  * `240x176` (HQVGA)\n  \n  * `320x240` (QVGA)\n  \n  * `400x296` (CIF)\n  \n  * `640x480` (VGA, default)\n  \n  * `800x600` (SVGA)\n  \n  * `1024x768` (XGA)\n  \n  * `1280x1024` (SXGA)\n  \n  * `1600x1200` (UXGA)\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "jpeg_quality": {
              "key": "Optional",
              "default": "10",
              "type": "integer",
              "docs": "**int**: The JPEG quality that the camera should encode images with. From 10 (best) to 63 (worst). Defaults to `10`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "contrast": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "data_type": "camera_range_param",
              "docs": "**int**: The contrast to apply to the picture, from -2 to 2. Defaults to `0`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "brightness": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "data_type": "camera_range_param",
              "docs": "**int**: The brightness to apply to the picture, from -2 to 2. Defaults to `0`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "saturation": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "data_type": "camera_range_param",
              "docs": "**int**: The saturation to apply to the picture, from -2 to 2. Defaults to `0`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "vertical_flip": {
              "key": "Optional",
              "default": "True",
              "type": "boolean",
              "docs": "**boolean**: Whether to flip the image vertically. Defaults to `true`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "horizontal_mirror": {
              "key": "Optional",
              "default": "True",
              "type": "boolean",
              "docs": "**boolean**: Whether to mirror the image horizontally. Defaults to `true`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "special_effect": {
              "key": "Optional",
              "default": "NONE",
              "type": "enum",
              "values": [
                "NONE",
                "NEGATIVE",
                "GRAYSCALE",
                "RED_TINT",
                "GREEN_TINT",
                "BLUE_TINT",
                "SEPIA"
              ],
              "docs": "**enum**: The effect to apply to the picture. Defaults to `none` (picture without effect).\n  * `none`: Picture without effect\n  \n  * `negative`: Colors of picture are inverted\n  \n  * `grayscale`: Only luminance of picture is kept\n  \n  * `red_tint`: Picture appear red-tinted\n  \n  * `green_tint`: Picture appear green-tinted\n  \n  * `blue_tint`: Picture appear blue-tinted\n  \n  * `sepia`: Sepia effect is applied to picture\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*",
              "values_docs": {
                "NONE": "Picture without effect",
                "NEGATIVE": "Colors of picture are inverted",
                "GRAYSCALE": "Only luminance of picture is kept",
                "RED_TINT": "Picture appear red-tinted",
                "GREEN_TINT": "Picture appear green-tinted",
                "BLUE_TINT": "Picture appear blue-tinted",
                "SEPIA": "Sepia effect is applied to picture"
              }
            },
            "agc_mode": {
              "key": "Optional",
              "default": "AUTO",
              "type": "enum",
              "values": [
                "MANUAL",
                "AUTO"
              ],
              "docs": "**enum**: The mode of gain control module. Defaults to `auto` (leave camera to automatically adjust sensor gain).\n  * `manual`: Gain can be manually set, with **agc_value** parameter. **agc_gain_ceiling** has no effect here\n  \n  * `auto`: Camera manage sensor gain automatically. Maximum gain can be defined, thanks to **agc_gain_ceiling** parameter. **agc_value** has no effect here\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*",
              "values_docs": {
                "MANUAL": "Gain can be manually set, with **agc_value** parameter. **agc_gain_ceiling** has no effect here",
                "AUTO": "Camera manage sensor gain automatically. Maximum gain can be defined, thanks to **agc_gain_ceiling** parameter. **agc_value** has no effect here"
              }
            },
            "aec2": {
              "key": "Optional",
              "default": "False",
              "type": "boolean",
              "docs": "**boolean**: Whether to enable Auto Exposure Control 2. Seems to change computation method of automatic exposure. Defaults to `false`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "ae_level": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "data_type": "camera_range_param",
              "docs": "**int**: The auto exposure level to apply to the picture (when **aec_mode** is set to `auto`), from -2 to 2. Defaults to `0`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "aec_value": {
              "key": "Optional",
              "default": "300",
              "type": "integer",
              "docs": "**int**: The Exposure value to apply to the picture (when **aec_mode** is set to `manual`), from 0 to 1200. Defaults to `300`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "aec_mode": {
              "key": "Optional",
              "default": "AUTO",
              "type": "enum",
              "values": [
                "MANUAL",
                "AUTO"
              ],
              "docs": "**enum**: The mode of exposure module. Defaults to `auto` (leave camera to automatically adjust exposure).\n  * `manual`: Exposure can be manually set, with **aec_value** parameter. **ae_level** has no effect here\n  \n  * `auto`: Camera manage exposure automatically. Compensation can be applied, thanks to **ae_level** parameter. **aec_value** has no effect here\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*",
              "values_docs": {
                "MANUAL": "Exposure can be manually set, with **aec_value** parameter. **ae_level** has no effect here",
                "AUTO": "Camera manage exposure automatically. Compensation can be applied, thanks to **ae_level** parameter. **aec_value** has no effect here"
              }
            },
            "agc_value": {
              "key": "Optional",
              "default": "0",
              "type": "integer",
              "docs": "**int**: The gain value to apply to the picture (when **aec_mode** is set to `manual`), from 0 to 30. Defaults to `0`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "agc_gain_ceiling": {
              "key": "Optional",
              "default": "2X",
              "type": "enum",
              "values": [
                "2X",
                "4X",
                "8X",
                "16X",
                "32X",
                "64X",
                "128X"
              ],
              "docs": "**enum**: The maximum gain allowed, when **agc_mode** is set to `auto`. This parameter seems act as \u201cISO\u201d setting. Defaults to `2x`.\n  * `2x`: Camera is less sensitive, picture is clean (without visible noise)\n  \n  * `4x`\n  \n  * `8x`\n  \n  * `16x`\n  \n  * `32x`\n  \n  * `64x`\n  \n  * `128x`: Camera is more sensitive, but picture contain lot of noise\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*",
              "values_docs": {
                "2X": "Camera is less sensitive, picture is clean (without visible noise)",
                "128X": "Camera is more sensitive, but picture contain lot of noise"
              }
            },
            "wb_mode": {
              "key": "Optional",
              "default": "AUTO",
              "type": "enum",
              "values": [
                "AUTO",
                "SUNNY",
                "CLOUDY",
                "OFFICE",
                "HOME"
              ],
              "docs": "**enum**: The mode of white balace module. Defaults to `auto`.\n  * `auto`: Camera choose best white balance setting\n  \n  * `sunny`: White balance sunny mode\n  \n  * `cloudy`: White balance cloudy mode\n  \n  * `office`: White balance office mode\n  \n  * `home`: White balance home mode\n  \n  \n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*",
              "values_docs": {
                "AUTO": "Camera choose best white balance setting",
                "SUNNY": "White balance sunny mode",
                "CLOUDY": "White balance cloudy mode",
                "OFFICE": "White balance office mode",
                "HOME": "White balance home mode"
              }
            },
            "test_pattern": {
              "key": "Optional",
              "default": "False",
              "type": "boolean",
              "docs": "**boolean**: For tests purposes, it\u2019s possible to replace picture get from sensor by a test color pattern. Defaults to `false`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "max_framerate": {
              "key": "Optional",
              "default": "10 fps",
              "docs": "**float**: The maximum framerate the camera will generate images at. Up to 60Hz is possible (with reduced frame sizes), but beware of overheating. Defaults to `10 fps`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "idle_framerate": {
              "key": "Optional",
              "default": "0.1 fps",
              "docs": "**float**: The framerate to capture images at when no client is requesting a full stream. Defaults to `0.1 fps`.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "on_stream_start": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a stream starts.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            },
            "on_stream_stop": {
              "key": "Optional",
              "type": "trigger",
              "docs": "**[Automation](https://esphome.io/guides/automations.html#automation)**: An automation to perform when a stream stops.\n\n*See also: [ESP32 Camera Component](https://esphome.io/components/esp32_camera.html#configuration-variables)*"
            }
          }
        }
      }
    }
  }
}